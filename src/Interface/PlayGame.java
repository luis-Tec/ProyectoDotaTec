/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Entities.*;
import static Interface.AttackCharacter.*;
import static Interface.AttackTower.Damage11;
import static Interface.AttackTower.Element11;
import static Interface.AttackTower.Health11;
import static Interface.AttackTower.Lvl11;
import static Interface.AttackTower.Mana11;
import static Interface.AttackTower.jLabelCharacter11;
import static Interface.Menu.UserStadistics;
import static Interface.UserLogin.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class PlayGame extends javax.swing.JFrame {

    //Global
    DefaultTableModel model = (DefaultTableModel) jTablePlay.getModel();

    public static FireCharacter CurrentFire;
    public static WaterCharacter CurrentWater;
    public static WindCharacter CurrentWind;
    public static GroundCharacter CurrentGround;

    public static FireCharacter EnemyFire;
    public static WaterCharacter EnemyWater;
    public static WindCharacter EnemyWind;
    public static GroundCharacter EnemyGround;
    public static Towers EnemyTower;

    public static int PosX;
    public static int PosY;

    public static int PosX2;
    public static int PosY2;

    public static Player player1;
    public static Player player2;

    public static Object matriz[][] = new Object[10][10];

    public static boolean Turn1 = true;
    public static boolean Turn2 = false;

    public static int Cont = 3;

    public static int DeathP1 = 0;
    public static int DeathP2 = 0;

    public static int KillsP1 = 0;
    public static int KillsP2 = 0;

    public static int contTowersP1 = 0;
    public static int contTowersP2 = 0;

    public PlayGame() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTablePlay.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jTablePlay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTablePlay);
        if (jTablePlay.getColumnModel().getColumnCount() > 0) {
            jTablePlay.getColumnModel().getColumn(8).setMinWidth(50);
            jTablePlay.getColumnModel().getColumn(8).setPreferredWidth(50);
            jTablePlay.getColumnModel().getColumn(8).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 109, 530, 187));

        jLabel4.setText("0");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 136, 10, -1));

        jLabel6.setText("1");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 156, 10, 10));

        jLabel7.setText("2");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 172, 40, 10));

        jLabel8.setText("4");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 40, -1));

        jLabel9.setText("3");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 186, 40, -1));

        jLabel5.setText("5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 216, 20, -1));

        jLabel10.setText("6");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 234, 20, 10));

        jLabel11.setText("7");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 20, 10));

        jLabel12.setText("8");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 266, 30, 10));

        jLabel13.setText("9");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 276, 20, 20));

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 0, -1, -1));

        jLabelPlayer.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabelPlayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayer.setText("Player1");
        jLabelPlayer.setToolTipText("");
        getContentPane().add(jLabelPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 70, 212, 33));

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("Select");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 321, 96, -1));

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton6.setText("Move");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 357, 96, -1));

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton7.setText("Attack");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(439, 357, 96, -1));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 357, 96, 21));

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton8.setText("Skip");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 396, 96, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/4.jpg"))); // NOI18N
        jLabel2.setText("         ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int PosX1 = jTablePlay.getSelectedRow();
        int PosY1 = jTablePlay.getSelectedColumn();
        if (Turn1 == true) {
            if (CurrentFire != null) {
                if (PosX1 != -1 && PosY1 != -1) {
                    if (CurrentFire != null) {
                        UserLogin.Methods.MoveCharacterFire(CurrentFire, PosX1, PosY1);
                        CurrentFire = null;
                        jLabel14.setText(null);
                    }
                }
            } else {
                if (CurrentWater != null) {
                    if (PosX1 != -1 && PosY1 != -1) {
                        if (CurrentWater != null) {
                            UserLogin.Methods.MoveCharacterWater(CurrentWater, PosX1, PosY1);

                            CurrentWater = null;
                            jLabel14.setText(null);
                        }
                    }
                } else {
                    if (CurrentWind != null) {
                        if (PosX1 != -1 && PosY1 != -1) {
                            if (CurrentWind != null) {
                                UserLogin.Methods.MoveCharacterWind(CurrentWind, PosX1, PosY1);

                                CurrentWind = null;
                                jLabel14.setText(null);
                            }
                        }
                    } else {
                        if (CurrentGround != null) {
                            if (PosX1 != -1 && PosY1 != -1) {
                                if (CurrentGround != null) {
                                    UserLogin.Methods.MoveCharacterGround(CurrentGround, PosX1, PosY1);

                                    CurrentGround = null;
                                    jLabel14.setText(null);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Select Character");
                        }
                    }
                }
            }
        }
        if (Turn2 == true) {
            if (CurrentFire != null) {
                if (PosX1 != -1 && PosY1 != -1) {
                    if (CurrentFire != null) {
                        UserLogin.Methods.MoveCharacterFire(CurrentFire, PosX1, PosY1);

                        CurrentFire = null;
                        jLabel14.setText(null);
                    }
                }
            } else {
                if (CurrentWater != null) {
                    if (PosX1 != -1 && PosY1 != -1) {
                        if (CurrentWater != null) {
                            UserLogin.Methods.MoveCharacterWater(CurrentWater, PosX1, PosY1);

                            CurrentWater = null;
                            jLabel14.setText(null);
                        }
                    }
                } else {
                    if (CurrentWind != null) {
                        if (PosX1 != -1 && PosY1 != -1) {
                            if (CurrentWind != null) {
                                UserLogin.Methods.MoveCharacterWind(CurrentWind, PosX1, PosY1);

                                CurrentWind = null;
                                jLabel14.setText(null);
                            }
                        }
                    } else {
                        if (CurrentGround != null) {
                            if (PosX1 != -1 && PosY1 != -1) {
                                if (CurrentGround != null) {
                                    UserLogin.Methods.MoveCharacterGround(CurrentGround, PosX1, PosY1);
                                    CurrentGround = null;
                                    jLabel14.setText(null);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Select Character");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int PosX1 = jTablePlay.getSelectedRow();
        int PosY1 = jTablePlay.getSelectedColumn();
        if (Turn1 == true) {
            if (PosX1 != -1 && PosY1 != -1) {
                PosX2 = PosX1;
                PosY2 = PosY1;
                if (((PosX2 - PosX) == 1) || ((PosX2 - PosX) == -1) || (PosX2 == PosX)) {
                    if (((PosY2 - PosY) == 1) || ((PosY2 - PosY) == -1) || (PosY2 == PosY)) {
                        if (CurrentFire != null) {
                            //Load jlabel
                            jLabelCharacter1.setText(CurrentFire.getName());
                            Lvl1.setText(CurrentFire.getLevel() + "");
                            Element1.setText(CurrentFire.getElement());
                            Health1.setText(CurrentFire.getHealth() + "");
                            Mana1.setText(CurrentFire.getMana() + "");
                            Damage1.setText(CurrentFire.getDamage() + "");

                            jLabelCharacter11.setText(CurrentFire.getName());
                            Lvl11.setText(CurrentFire.getLevel() + "");
                            Element11.setText(CurrentFire.getElement());
                            Health11.setText(CurrentFire.getHealth() + "");
                            Mana11.setText(CurrentFire.getMana() + "");
                            Damage11.setText(CurrentFire.getDamage() + "");

                            UserLogin.Methods.LoadAbilitiesFire(CurrentFire);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player1.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player1.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player1.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player1.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player1.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentWater != null) {
                            jLabelCharacter1.setText(CurrentWater.getName());
                            Lvl1.setText(CurrentWater.getLevel() + "");
                            Element1.setText(CurrentWater.getElement());
                            Health1.setText(CurrentWater.getHealth() + "");
                            Mana1.setText(CurrentWater.getMana() + "");
                            Damage1.setText(CurrentWater.getDamage() + "");

                            jLabelCharacter11.setText(CurrentWater.getName());
                            Lvl11.setText(CurrentWater.getLevel() + "");
                            Element11.setText(CurrentWater.getElement());
                            Health11.setText(CurrentWater.getHealth() + "");
                            Mana11.setText(CurrentWater.getMana() + "");
                            Damage11.setText(CurrentWater.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesWater(CurrentWater);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player1.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player1.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player1.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player1.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player1.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentWind != null) {
                            jLabelCharacter1.setText(CurrentWind.getName());
                            Lvl1.setText(CurrentWind.getLevel() + "");
                            Element1.setText(CurrentWind.getElement());
                            Health1.setText(CurrentWind.getHealth() + "");
                            Mana1.setText(CurrentWind.getMana() + "");
                            Damage1.setText(CurrentWind.getDamage() + "");
                            jLabelCharacter11.setText(CurrentWind.getName());
                            Lvl11.setText(CurrentWind.getLevel() + "");
                            Element11.setText(CurrentWind.getElement());
                            Health11.setText(CurrentWind.getHealth() + "");
                            Mana11.setText(CurrentWind.getMana() + "");
                            Damage11.setText(CurrentWind.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesWind(CurrentWind);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player1.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player1.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player1.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player1.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player1.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentGround != null) {
                            jLabelCharacter1.setText(CurrentGround.getName());
                            Lvl1.setText(CurrentGround.getLevel() + "");
                            Element1.setText(CurrentGround.getElement());
                            Health1.setText(CurrentGround.getHealth() + "");
                            Mana1.setText(CurrentGround.getMana() + "");
                            Damage1.setText(CurrentGround.getDamage() + "");
                            jLabelCharacter11.setText(CurrentGround.getName());
                            Lvl11.setText(CurrentGround.getLevel() + "");
                            Element11.setText(CurrentGround.getElement());
                            Health11.setText(CurrentGround.getHealth() + "");
                            Mana11.setText(CurrentGround.getMana() + "");
                            Damage11.setText(CurrentGround.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesGround(CurrentGround);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player1.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player1.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player1.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player1.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player1.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Select Character");
            }
            jLabel14.setText(null);
        }
        if (Turn2 == true) {
            if (PosX1 != -1 && PosY1 != -1) {
                PosX2 = PosX1;
                PosY2 = PosY1;
                if (((PosX2 - PosX) == 1) || ((PosX2 - PosX) == -1) || (PosX2 == PosX)) {
                    if (((PosY2 - PosY) == 1) || ((PosY2 - PosY) == -1) || (PosY2 == PosY)) {
                        if (CurrentFire != null) {
                            //Load jlabel
                            jLabelCharacter1.setText(CurrentFire.getName());
                            Lvl1.setText(CurrentFire.getLevel() + "");
                            Element1.setText(CurrentFire.getElement());
                            Health1.setText(CurrentFire.getHealth() + "");
                            Mana1.setText(CurrentFire.getMana() + "");
                            Damage1.setText(CurrentFire.getDamage() + "");
                            jLabelCharacter11.setText(CurrentFire.getName());
                            Lvl11.setText(CurrentFire.getLevel() + "");
                            Element11.setText(CurrentFire.getElement());
                            Health11.setText(CurrentFire.getHealth() + "");
                            Mana11.setText(CurrentFire.getMana() + "");
                            Damage11.setText(CurrentFire.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesFire(CurrentFire);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player2.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player2.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana1.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player2.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player2.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player2.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentWater != null) {
                            jLabelCharacter1.setText(CurrentWater.getName());
                            Lvl1.setText(CurrentWater.getLevel() + "");
                            Element1.setText(CurrentWater.getElement());
                            Health1.setText(CurrentWater.getHealth() + "");
                            Mana1.setText(CurrentWater.getMana() + "");
                            Damage1.setText(CurrentWater.getDamage() + "");
                            jLabelCharacter11.setText(CurrentWater.getName());
                            Lvl11.setText(CurrentWater.getLevel() + "");
                            Element11.setText(CurrentWater.getElement());
                            Health11.setText(CurrentWater.getHealth() + "");
                            Mana11.setText(CurrentWater.getMana() + "");
                            Damage11.setText(CurrentWater.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesWater(CurrentWater);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player2.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player2.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player2.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player2.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player2.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentWind != null) {
                            jLabelCharacter1.setText(CurrentWind.getName());
                            Lvl1.setText(CurrentWind.getLevel() + "");
                            Element1.setText(CurrentWind.getElement());
                            Health1.setText(CurrentWind.getHealth() + "");
                            Mana1.setText(CurrentWind.getMana() + "");
                            Damage1.setText(CurrentWind.getDamage() + "");
                            jLabelCharacter11.setText(CurrentWind.getName());
                            Lvl11.setText(CurrentWind.getLevel() + "");
                            Element11.setText(CurrentWind.getElement());
                            Health11.setText(CurrentWind.getHealth() + "");
                            Mana11.setText(CurrentWind.getMana() + "");
                            Damage11.setText(CurrentWind.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesWind(CurrentWind);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player2.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player2.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player2.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player2.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player2.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                        if (CurrentGround != null) {
                            jLabelCharacter1.setText(CurrentGround.getName());
                            Lvl1.setText(CurrentGround.getLevel() + "");
                            Element1.setText(CurrentGround.getElement());
                            Health1.setText(CurrentGround.getHealth() + "");
                            Mana1.setText(CurrentGround.getMana() + "");
                            Damage1.setText(CurrentGround.getDamage() + "");
                            jLabelCharacter11.setText(CurrentGround.getName());
                            Lvl11.setText(CurrentGround.getLevel() + "");
                            Element11.setText(CurrentGround.getElement());
                            Health11.setText(CurrentGround.getHealth() + "");
                            Mana11.setText(CurrentGround.getMana() + "");
                            Damage11.setText(CurrentGround.getDamage() + "");
                            UserLogin.Methods.LoadAbilitiesGround(CurrentGround);
                            if (matriz[PosX1][PosY1] != null) {
                                String TableObject = jTablePlay.getValueAt(PosX2, PosY2) + "";
                                if (TableObject.equals("X")) {
                                    JOptionPane.showMessageDialog(null, "The enemy character is dead");
                                    return;
                                } else {
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.Towers")) {
                                        Towers tw = (Towers) matriz[PosX1][PosY1];
                                        if (player2.TowersList.contains(tw)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your tower");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyTower = tw;
                                            AttackTower.jLabelTowerName.setText(EnemyTower.getHealth() + "");
                                            AttackTower.TowerHealth.setText("Enemy Tower");
                                            UserLogin.attackTower.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.FireCharacter")) {
                                        FireCharacter fireCharacter = (FireCharacter) matriz[PosX1][PosY1];
                                        if (player2.fireCharactersList.contains(fireCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyFire = fireCharacter;
                                            jLabelCharacter2.setText(EnemyFire.getName());
                                            Lvl2.setText(EnemyFire.getLevel() + "");
                                            Element2.setText(EnemyFire.getElement());
                                            Health2.setText(EnemyFire.getHealth() + "");
                                            Mana2.setText(EnemyFire.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }

                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.WaterCharacter")) {
                                        WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX1][PosY1];
                                        if (player2.waterCharactersList.contains(waterCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWater = waterCharacter;
                                            jLabelCharacter2.setText(EnemyWater.getName());
                                            Lvl2.setText(EnemyWater.getLevel() + "");
                                            Element2.setText(EnemyWater.getElement());
                                            Health2.setText(EnemyWater.getHealth() + "");
                                            Mana2.setText(EnemyWater.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                        WindCharacter windCharacter = (WindCharacter) matriz[PosX1][PosY1];
                                        if (player2.windCharactersList.contains(windCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyWind = windCharacter;
                                            jLabelCharacter2.setText(EnemyWind.getName());
                                            Lvl2.setText(EnemyWind.getLevel() + "");
                                            Element2.setText(EnemyWind.getElement());
                                            Health2.setText(EnemyWind.getHealth() + "");
                                            Mana2.setText(EnemyWind.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                    if (matriz[PosX1][PosY1].getClass().getName().equals("Entities.GroundCharacter")) {
                                        GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX1][PosY1];
                                        if (player2.groundCharactersList.contains(groundCharacter)) {
                                            JOptionPane.showMessageDialog(null, "You can't attack your character");
                                            PosX1 = -1;
                                            PosX1 = -1;
                                            return;
                                        } else {
                                            EnemyGround = groundCharacter;
                                            jLabelCharacter2.setText(EnemyGround.getName());
                                            Lvl2.setText(EnemyGround.getLevel() + "");
                                            Element2.setText(EnemyGround.getElement());
                                            Health2.setText(EnemyGround.getHealth() + "");
                                            Mana2.setText(EnemyGround.getMana() + "");
                                            UserLogin.attackcharacter.setVisible(true);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Select Character");
            }
            jLabel14.setText(null);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTablePlay.getModel();
        int i = jTablePlay.getSelectedRow();
        int j = jTablePlay.getSelectedColumn();
        if (Turn1 == true) {
            if (i != -1 && j != -1) {
                PosX = jTablePlay.getSelectedRow();
                PosY = jTablePlay.getSelectedColumn();
                try {
                    if (model.getValueAt(PosX, PosY) != null) {
                        String TableObject = jTablePlay.getValueAt(PosX, PosY) + "";
                        if (TableObject.equals("X")) {
                            JOptionPane.showMessageDialog(null, "Your character is dead, select another character");
                            //////////////////////////
                            if (Cont == 0) {
                                jLabelPlayer.setText("Player2");
                                Turn1 = false;
                                Turn2 = true;
                                Cont = 3;
                                UserLogin.Methods.BackToLife1();
                                UserLogin.Methods.AddMana2();
                                UserLogin.Methods.ResetTurnsPlayer2();
                            } else {
                                Cont = Cont - 1;
                                if (Cont == 0) {
                                    jLabelPlayer.setText("Player2");
                                    Turn1 = false;
                                    Turn2 = true;
                                    Cont = 3;
                                    UserLogin.Methods.BackToLife1();
                                    UserLogin.Methods.AddMana2();
                                    UserLogin.Methods.ResetTurnsPlayer2();
                                }
                            }
                            ////////////////////////////
                        } else {
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.FireCharacter")) {
                                FireCharacter fireCharacter = (FireCharacter) matriz[PosX][PosY];
                                if (player1.fireCharactersList.contains(fireCharacter)) {
                                    if (fireCharacter.isTurn()) {
                                        CurrentFire = fireCharacter;
                                        jLabel14.setText(CurrentFire.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;
                                }
                            }
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.WaterCharacter")) {
                                WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX][PosY];
                                if (player1.waterCharactersList.contains(waterCharacter)) {
                                    if (waterCharacter.isTurn() == true) {
                                        CurrentWater = waterCharacter;
                                        jLabel14.setText(CurrentWater.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;
                                }
                            }
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                WindCharacter windCharacter = (WindCharacter) matriz[PosX][PosY];
                                if (player1.windCharactersList.contains(windCharacter)) {
                                    if (windCharacter.isTurn() == true) {
                                        CurrentWind = windCharacter;
                                        jLabel14.setText(CurrentWind.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;

                                }
                            }
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.GroundCharacter")) {
                                GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX][PosY];
                                if (player1.groundCharactersList.contains(groundCharacter)) {
                                    if (groundCharacter.isTurn() == true) {
                                        CurrentGround = groundCharacter;
                                        jLabel14.setText(CurrentGround.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;

                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No Character");
                        return;
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, "Select Character");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Select Character");
                return;
            }
        }
        if (Turn2 == true) {
            if (i != -1 && j != -1) {
                PosX = jTablePlay.getSelectedRow();
                PosY = jTablePlay.getSelectedColumn();
                try {
                    if (model.getValueAt(PosX, PosY) != null) {
                        String TableObject = jTablePlay.getValueAt(PosX, PosY) + "";
                        if (TableObject.equals("X")) {
                            JOptionPane.showMessageDialog(null, "Your character is dead, select another character");
                            //////////////////////////
                            if (Cont == 0) {
                                jLabelPlayer.setText("Player1");
                                Turn1 = true;
                                Turn2 = false;
                                Cont = 3;
                                UserLogin.Methods.BackToLife2();
                                UserLogin.Methods.AddMana1();
                                UserLogin.Methods.ResetTurnsPlayer1();
                            } else {
                                Cont = Cont - 1;
                                if (Cont == 0) {
                                    jLabelPlayer.setText("Player1");
                                    Turn1 = true;
                                    Turn2 = false;
                                    Cont = 3;
                                    UserLogin.Methods.BackToLife2();
                                    UserLogin.Methods.AddMana1();
                                    UserLogin.Methods.ResetTurnsPlayer1();
                                }
                            }
                            ////////////////////////////
                        } else {
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.FireCharacter")) {
                                FireCharacter fireCharacter = (FireCharacter) matriz[PosX][PosY];
                                if (player2.fireCharactersList.contains(fireCharacter)) {
                                    if (fireCharacter.isTurn() == true) {
                                        CurrentFire = fireCharacter;
                                        jLabel14.setText(CurrentFire.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;

                                }
                            }

                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.WaterCharacter")) {
                                WaterCharacter waterCharacter = (WaterCharacter) matriz[PosX][PosY];
                                if (player2.waterCharactersList.contains(waterCharacter)) {
                                    if (waterCharacter.isTurn() == true) {
                                        CurrentWater = waterCharacter;
                                        jLabel14.setText(CurrentWater.getName());
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;

                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;
                                }
                            }
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.WindCharacter")) {
                                WindCharacter windCharacter = (WindCharacter) matriz[PosX][PosY];
                                if (player2.windCharactersList.contains(windCharacter)) {
                                    if (windCharacter.isTurn() == true) {
                                        CurrentWind = windCharacter;
                                        jLabel14.setText(CurrentWind.getName());
                                    } else {

                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;
                                }
                            }
                            if (matriz[PosX][PosY].getClass().getName().equals("Entities.GroundCharacter")) {
                                GroundCharacter groundCharacter = (GroundCharacter) matriz[PosX][PosY];
                                if (player2.groundCharactersList.contains(groundCharacter)) {
                                    if (groundCharacter.isTurn() == true) {
                                        CurrentGround = groundCharacter;
                                        jLabel14.setText(CurrentGround.getName());
                                    } else {

                                        JOptionPane.showMessageDialog(null, "You can not use the character again");
                                        return;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "you can not select an enemy character");
                                    return;
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No Character");
                        return;
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null, "Select Character");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Select Character");
                return;
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (Turn1 == true) {
            if (CurrentFire != null) {
                CurrentFire.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentFire = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player2");
                    Turn1 = false;
                    Turn2 = true;
                    Cont = 3;
                    UserLogin.Methods.BackToLife1();
                    UserLogin.Methods.AddMana2();
                    UserLogin.Methods.ResetTurnsPlayer2();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player2");
                        Turn1 = false;
                        Turn2 = true;
                        Cont = 3;
                        UserLogin.Methods.BackToLife1();
                        UserLogin.Methods.AddMana2();
                        UserLogin.Methods.ResetTurnsPlayer2();
                    }
                }
                ////////////////////////////
            }
            if (CurrentGround != null) {
                CurrentGround.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentGround = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player2");
                    Turn1 = false;
                    Turn2 = true;
                    Cont = 3;
                    UserLogin.Methods.BackToLife1();
                    UserLogin.Methods.AddMana2();
                    UserLogin.Methods.ResetTurnsPlayer2();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player2");
                        Turn1 = false;
                        Turn2 = true;
                        Cont = 3;
                        UserLogin.Methods.BackToLife1();
                        UserLogin.Methods.AddMana2();
                        UserLogin.Methods.ResetTurnsPlayer2();
                    }
                }
                ////////////////////////////
            }
            if (CurrentWater != null) {
                CurrentWater.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentWater = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player2");
                    Turn1 = false;
                    Turn2 = true;
                    Cont = 3;
                    UserLogin.Methods.BackToLife1();
                    UserLogin.Methods.AddMana2();
                    UserLogin.Methods.ResetTurnsPlayer2();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player2");
                        Turn1 = false;
                        Turn2 = true;
                        Cont = 3;
                        UserLogin.Methods.BackToLife1();
                        UserLogin.Methods.AddMana2();
                        UserLogin.Methods.ResetTurnsPlayer2();
                    }
                }
                ////////////////////////////
            }
            if (CurrentWind != null) {
                CurrentWind.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentWind = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player2");
                    Turn1 = false;
                    Turn2 = true;
                    Cont = 3;
                    UserLogin.Methods.BackToLife1();
                    UserLogin.Methods.AddMana2();
                    UserLogin.Methods.ResetTurnsPlayer2();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player2");
                        Turn1 = false;
                        Turn2 = true;
                        Cont = 3;
                        UserLogin.Methods.BackToLife1();
                        UserLogin.Methods.AddMana2();
                        UserLogin.Methods.ResetTurnsPlayer2();
                    }
                }
                ////////////////////////////
            }
            jLabel14.setText(null);
        }

        if (Turn2 == true) {
            if (CurrentFire != null) {
                CurrentFire.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentFire = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player1");
                    Turn1 = true;
                    Turn2 = false;
                    Cont = 3;
                    UserLogin.Methods.BackToLife2();
                    UserLogin.Methods.AddMana1();
                    UserLogin.Methods.ResetTurnsPlayer1();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player1");
                        Turn1 = true;
                        Turn2 = false;
                        Cont = 3;
                        UserLogin.Methods.BackToLife2();
                        UserLogin.Methods.AddMana1();
                        UserLogin.Methods.ResetTurnsPlayer1();
                    }
                }
                ////////////////////////////
            }
            if (CurrentGround != null) {
                CurrentGround.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentGround = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player1");
                    Turn1 = true;
                    Turn2 = false;
                    Cont = 3;
                    UserLogin.Methods.BackToLife2();
                    UserLogin.Methods.AddMana1();
                    UserLogin.Methods.ResetTurnsPlayer1();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player1");
                        Turn1 = true;
                        Turn2 = false;
                        Cont = 3;
                        UserLogin.Methods.BackToLife2();
                        UserLogin.Methods.AddMana1();
                        UserLogin.Methods.ResetTurnsPlayer1();
                    }
                }
                ////////////////////////////
            }
            if (CurrentWater != null) {
                CurrentWater.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentWater = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player1");
                    Turn1 = true;
                    Turn2 = false;
                    Cont = 3;
                    UserLogin.Methods.BackToLife2();
                    UserLogin.Methods.AddMana1();
                    UserLogin.Methods.ResetTurnsPlayer1();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player1");
                        Turn1 = true;
                        Turn2 = false;
                        Cont = 3;
                        UserLogin.Methods.BackToLife2();
                        UserLogin.Methods.AddMana1();
                        UserLogin.Methods.ResetTurnsPlayer1();
                    }
                }
                ////////////////////////////
            }
            if (CurrentWind != null) {
                CurrentWind.setTurn(false);
                JOptionPane.showMessageDialog(null, "Skipped Turn");
                CurrentWind = null;
                //////////////////////////
                if (Cont == 0) {
                    jLabelPlayer.setText("Player1");
                    Turn1 = true;
                    Turn2 = false;
                    Cont = 3;
                    UserLogin.Methods.BackToLife2();
                    UserLogin.Methods.AddMana1();
                    UserLogin.Methods.ResetTurnsPlayer1();
                } else {
                    Cont = Cont - 1;
                    if (Cont == 0) {
                        jLabelPlayer.setText("Player1");
                        Turn1 = true;
                        Turn2 = false;
                        Cont = 3;
                        UserLogin.Methods.BackToLife2();
                        UserLogin.Methods.AddMana1();
                        UserLogin.Methods.ResetTurnsPlayer1();
                    }
                }
                ////////////////////////////
            }
            jLabel14.setText(null);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String[] options = {"Yes", "Cancel"};
        int answer = JOptionPane.showOptionDialog(null, "You want to exit the game, the actual game finish and you loss", "Exit Game", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, null);
        if (answer == JOptionPane.YES_OPTION) {
            FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
            FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
            FinishGame.jTextField4.setText(Integer.toString(DeathP1));
            FinishGame.jTextField5.setText(Integer.toString(DeathP2));
            FinishGame.jTextField6.setText(Integer.toString(KillsP1));
            FinishGame.jTextField7.setText(Integer.toString(KillsP2));
            FinishGame.jTextField1.setText("Player2");
            finishGame.setVisible(true);
            this.dispose();
            UserLogin.clip.stop();
            UserLoginInterface.sonido("Sad Fantasy Music - Hold The Door  Hodor [Game Of Thrones]");
        } else {
            System.out.println("Continue the Game");
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public void GameStadistics() {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static final javax.swing.JLabel jLabelPlayer = new javax.swing.JLabel();
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public static final javax.swing.JTable jTablePlay = new javax.swing.JTable();
    // End of variables declaration//GEN-END:variables
}
