/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import static Interface.PlayGame.*;
import static Interface.UserLogin.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class AttackTower extends javax.swing.JFrame {

    DefaultTableModel model = (DefaultTableModel) jTablePlay.getModel();

    /**
     * Creates new form AtackTower
     */
    public AttackTower() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Health11.setBackground(new java.awt.Color(255, 255, 255));
        Health11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Health11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Health11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 131, 20));

        Mana11.setBackground(new java.awt.Color(255, 255, 255));
        Mana11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Mana11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Mana11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 131, 20));

        jLabelTowerName.setBackground(new java.awt.Color(255, 255, 255));
        jLabelTowerName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelTowerName.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jLabelTowerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, 131, 20));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enemy Tower");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, -1, -1));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Health:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 231, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 111, -1, -1));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel14.setText("Health:");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 231, -1, -1));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Mana:");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 271, -1, -1));

        jButton3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton3.setText("Basic Attack");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Health:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 188, -1, -1));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("My Character");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 30, -1, -1));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Damage:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 311, -1, -1));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Name:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 111, -1, -1));

        Damage11.setBackground(new java.awt.Color(255, 255, 255));
        Damage11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Damage11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Damage11, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 313, 131, 20));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Lvl:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 151, -1, -1));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Element:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 191, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setText("Health:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 231, -1, -1));

        jButton2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, -1, -1));

        TowerHealth.setBackground(new java.awt.Color(255, 255, 255));
        TowerHealth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TowerHealth.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(TowerHealth, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, 131, 20));

        jLabelCharacter11.setBackground(new java.awt.Color(255, 255, 255));
        jLabelCharacter11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCharacter11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jLabelCharacter11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 131, 20));

        Lvl11.setBackground(new java.awt.Color(255, 255, 255));
        Lvl11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Lvl11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Lvl11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 131, 20));

        Element11.setBackground(new java.awt.Color(255, 255, 255));
        Element11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Element11.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Element11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 131, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/tumblr_static_tumblr_static_bnjo0hdhm1kcw84k4sw84owo0_640-iloveimg-resized.gif"))); // NOI18N
        jLabel2.setText("  ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (Turn1 == true) {
            if (CurrentFire != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentFire.setTurn(false);
                        CurrentFire = null;
                        this.dispose();
                    } else {
                        CurrentFire.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player2.TowersList.size(); i++) {
                                if (player2.TowersList.get(i).equals(EnemyTower)) {
                                    player2.TowersList.remove(i);
                                    contTowersP1 += 1;
                                }
                            }
                            if (player2.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player1");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }

                            EnemyTower = null;
                            CurrentFire.setTurn(false);
                            CurrentFire = null;
                            this.dispose();

                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentFire.setTurn(false);
                            CurrentFire = null;
                            this.dispose();
                        }
                    }
                }
            }

            if (CurrentWater != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentWater.setTurn(false);
                        CurrentWater = null;
                        this.dispose();
                    } else {
                        CurrentWater.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player2.TowersList.size(); i++) {
                                if (player2.TowersList.get(i).equals(EnemyTower)) {
                                    player2.TowersList.remove(i);
                                    contTowersP1 += 1;
                                }
                            }
                            if (player2.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player1");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }

                            EnemyTower = null;
                            CurrentWater.setTurn(false);
                            CurrentWater = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentWater.setTurn(false);
                            CurrentWater = null;
                            this.dispose();
                        }
                    }
                }
            }
            if (CurrentGround != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentGround.setTurn(false);
                        CurrentGround = null;
                        this.dispose();
                    } else {
                        CurrentGround.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player2.TowersList.size(); i++) {
                                if (player2.TowersList.get(i).equals(EnemyTower)) {
                                    player2.TowersList.remove(i);
                                    contTowersP1 += 1;
                                }
                            }
                            if (player2.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player1");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentGround.setTurn(false);
                            CurrentGround = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentGround.setTurn(false);
                            CurrentGround = null;
                            this.dispose();
                        }
                    }
                }
            }
            if (CurrentWind != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentWind.setTurn(false);
                        CurrentWind = null;
                        this.dispose();
                    } else {
                        CurrentWind.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player2.TowersList.size(); i++) {
                                if (player2.TowersList.get(i).equals(EnemyTower)) {
                                    player2.TowersList.remove(i);
                                    contTowersP1 += 1;
                                }
                            }
                            if (player2.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player1");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentWind.setTurn(false);
                            CurrentWind = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentWind.setTurn(false);
                            CurrentWind = null;
                            this.dispose();
                        }
                    }
                }
            }
            //////////////////////////
            if (Cont == 0) {
                jLabelPlayer.setText("Player2");
                Turn1 = false;
                Turn2 = true;
                Cont = 3;
                UserLogin.Methods.BackToLife1();
                UserLogin.Methods.AddMana2();
                UserLogin.Methods.ResetTurnsPlayer2();
            } else {
                Cont = Cont - 1;
                if (Cont == 0) {
                    jLabelPlayer.setText("Player2");
                    Turn1 = false;
                    Turn2 = true;
                    Cont = 3;
                    UserLogin.Methods.BackToLife1();
                    UserLogin.Methods.AddMana2();
                    UserLogin.Methods.ResetTurnsPlayer2();
                }
            }
            ////////////////////////////
            return;
        }
        if (Turn2 == true) {
            if (CurrentFire != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentFire.setTurn(false);
                        CurrentFire = null;
                        this.dispose();
                    } else {
                        CurrentFire.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player1.TowersList.size(); i++) {
                                if (player1.TowersList.get(i).equals(EnemyTower)) {
                                    player1.TowersList.remove(i);
                                    contTowersP2 += 1;
                                }
                            }
                            if (player1.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player2");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentFire.setTurn(false);
                            CurrentFire = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentFire.setTurn(false);
                            CurrentFire = null;
                            this.dispose();
                        }
                    }
                }
            }
            if (CurrentWater != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentWater.setTurn(false);
                        CurrentWater = null;
                        this.dispose();
                    } else {
                        CurrentWater.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player1.TowersList.size(); i++) {
                                if (player1.TowersList.get(i).equals(EnemyTower)) {
                                    player1.TowersList.remove(i);
                                    contTowersP2 += 1;
                                }
                            }
                            if (player1.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player2");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentWater.setTurn(false);
                            CurrentWater = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentWater.setTurn(false);
                            CurrentWater = null;
                            this.dispose();
                        }
                    }
                }
            }
            if (CurrentGround != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentGround.setTurn(false);
                        CurrentGround = null;
                        this.dispose();
                    } else {
                        CurrentGround.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player1.TowersList.size(); i++) {
                                if (player1.TowersList.get(i).equals(EnemyTower)) {
                                    player1.TowersList.remove(i);
                                    contTowersP2 += 1;
                                }
                            }
                            if (player1.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player2");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentGround.setTurn(false);
                            CurrentGround = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentGround.setTurn(false);
                            CurrentGround = null;
                            this.dispose();
                        }
                    }
                }
            }
            if (CurrentWind != null) {
                if (EnemyTower != null) {
                    if (EnemyTower.getHealth() == 0) {
                        jTablePlay.setValueAt("X", PosX2, PosY2);
                        PosX2 = -1;
                        PosY2 = -1;
                        EnemyTower = null;
                        CurrentWind.setTurn(false);
                        CurrentWind = null;
                        this.dispose();
                    } else {
                        CurrentWind.BasicAttack(EnemyGround, EnemyFire, EnemyWind, EnemyWater, EnemyTower);
                        if (EnemyTower.getHealth() == 0) {
                            jTablePlay.setValueAt("X", PosX2, PosY2);
                            PosX2 = -1;
                            PosY2 = -1;
                            for (int i = 0; i < player1.TowersList.size(); i++) {
                                if (player1.TowersList.get(i).equals(EnemyTower)) {
                                    player1.TowersList.remove(i);
                                    contTowersP2 += 1;
                                }
                            }
                            if (player1.TowersList.isEmpty()) {
                                FinishGame.jTextField2.setText(Integer.toString(contTowersP1));
                                FinishGame.jTextField3.setText(Integer.toString(contTowersP2));
                                FinishGame.jTextField4.setText(Integer.toString(DeathP1));
                                FinishGame.jTextField5.setText(Integer.toString(DeathP2));
                                FinishGame.jTextField6.setText(Integer.toString(KillsP1));
                                FinishGame.jTextField7.setText(Integer.toString(KillsP2));
                                FinishGame.jTextField1.setText("Player2");

                                finishGame.setVisible(true);
                                PlayGameInterface.dispose();
                            }
                            EnemyTower = null;
                            CurrentWind.setTurn(false);
                            CurrentWind = null;
                            this.dispose();
                        } else {
                            PosX2 = -1;
                            PosY2 = -1;
                            EnemyTower = null;
                            CurrentWind.setTurn(false);
                            CurrentWind = null;
                            this.dispose();
                        }
                    }
                }
            }
            //////////////////////////
            if (Cont == 0) {
                jLabelPlayer.setText("Player1");
                Turn1 = true;
                Turn2 = false;
                UserLogin.Methods.BackToLife2();
                UserLogin.Methods.AddMana1();
                Cont = 3;
                UserLogin.Methods.ResetTurnsPlayer1();
            } else {
                Cont = Cont - 1;
                if (Cont == 0) {
                    jLabelPlayer.setText("Player1");
                    Turn1 = true;
                    Turn2 = false;
                    UserLogin.Methods.BackToLife2();
                    UserLogin.Methods.AddMana1();
                    Cont = 3;
                    UserLogin.Methods.ResetTurnsPlayer1();
                }
            }
            ////////////////////////////
            return;
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttackTower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttackTower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttackTower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttackTower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttackTower().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static final javax.swing.JLabel Damage11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel Element11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel Health11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel Lvl11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel Mana11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel TowerHealth = new javax.swing.JLabel();
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static final javax.swing.JLabel jLabelCharacter11 = new javax.swing.JLabel();
    public static final javax.swing.JLabel jLabelTowerName = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
}
